#summary This guide shows you how to use EzMath instead of LaTeX when writting posts or comments.
#labels Featured,Phase-Design,Phase-Support

=คู่มือไวยกรณ์ EzMath แบบติดจรวด=

คู่มือนี้ จะแสดงถึงวิธีการใช้ EzMath แทนที่ LaTeX เมื่อคุณต้องการเผยแพร่บทความหรือแสดงความความคิดเห็นบนเว็บบอร์ด

การใช้ EzMath นั้นง่ายกว่าการใช้ LaTeX มาก
แต่คุณก็ยังสามารถใช้ LaTeX ควบคู่ไปกับ EzMath ได้ถ้าคุณต้องการและรู้วิธีใช้มัน

<wiki:toc max_depth="3" />

=เริ่มต้น=

เมื่อต้องการแทรกสมการคณิตศาสตร์ในบรรทัดเดียวกับข้อความ เขียนไวยกรณ์ EzMath ภายในนี้

{{{
$$ ... $$
}}}

หรือเว้นบรรทัดก่อนและหลังไวยกรณ์ EzMath เช่นนี้

{{{
$$
...
$$
}}}

เพื่อแยกส่วนของสมการคณิตศาสตร์ออกจากข้อความทั่วไป


==กฎทั่วไป==

ไวยกรณ์ EzMath เป็น case sensitive (ตัวอักษรพิมพ์เล็ก-ใหญ่จะส่งผลต่างกัน)

แม้ว่าคุณจะสามารถพิมพ์ภาษาใดๆ เข้าไปในไวยกรณ์ EzMath ก็ได้ แต่เราแนะนำเฉพาะตัวอักษรภาษาอังกฤษ, ตัวเลขอาราบิก, และอักขระพิเศษแบบมาตรฐานเท่านั้น

{{{
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9 + - * / | \ ^ = ( ) [ ] { } < >
~ ? ! @ $ % & , . " ' : ; _ # space newline
}}}

space และ tab ไม่ถือว่าเป็นการจัดย่อหน้า ให้ใช้ `_` (underscore) และ `__` (double underscore) แทนตามลำดับ

แม้ว่าหลายครั้งนั้น space จะถูกมองว่าไม่จำเป็น คุณอาจเขียนสมการเช่นนี้ได้

{{{
a+b=c^2
}}}

แต่เพื่อหลีกเลี่ยงความกำกวม คุณควรจะใช้ space เว้นคำต่างๆ แยกจากกันทุกครั้ง

{{{
z = x i + y
}}}

newline จะถูกใช้งานเพื่อขึ้นบรรทัดใหม่แทบทั้งหมด โปรดระมัดระวังเมื่อใช้ newline เนื่องจากบางกรณีมันอาจทำให้ LaTeX เกิดข้อผิดพลาดได้ (เช่น `a/<newline>b`).

ใช้ `#` (hash) เพื่อจัดย่อหน้าสำหรับประโยคที่ตามมาในตำแหน่งเดียวกันกับบรรดทัดอื่นๆ

{{{
  a # = 22
  b # = 7
a/b # ~~ pi
}}}

ข้อควรระวังคือ ห้ามใช้ `#` ภายใต้วงเล็บใดๆ ทั้งสิ้น


=อะตอม=

อะตอมคือส่วนที่เล็กที่สุดของไวยกรณ์ EzMath คุณสามารถใช้มันเพื่อสร้างประโยคทางคณิตศาสตร์ได้


==จำนวน==

วิธีเขียนจำนวนมีอยู่ด้วยกัน 4 แบบ คือจำนวนเต็ม, ทศนิยม, ทศนิยมไม่รู้จบ, และทศนิยมซ้ำ

สำหรับ 3 แบบแรกนั้น EzMath จะมองมันในรูปแบบของ WYSIWYG (เห็นอย่างไรได้อย่างนั้น)

{{{
42, 0.25, 3.1416...
}}}

ส่วนทศนิยมซ้ำต้องเขียนอยู่ในรูปของ

{{{
0.0...238095... ,or 0....9...
}}}

ข้อควรระวังคือ จำนวนสามารถประกอบไปด้วยตัวเลขและจุดเท่านั้น


==สัญลักษณ์==

จัดการกับเครื่องหมายที่ใช้บ่อยๆ เช่นเดียวกับที่คุณทำในโปรแกรมคอมพิวเตอร์ทั่วไป

*เครื่องหมายดำเนินการพื้นฐาน:*

บวก, ลบ, คูณ, หาร

{{{
+ - * // = !=
}}}

*เครื่องหมายดำเนินการเพิ่มเติม:*

ผลคูณจุด, แฟคทอเรียล, หารลงตัว, บวกหรือลบ, ลบหรือบวก, สมมูล, ไข่ปลา

{{{
. ! | +- -+ ~ ...
}}}

*เครื่องหมายดำเนินการแบบซับซ้อน:*

{{{
(+) (-) (*) (/) (.) 
}}}

*เท่ากัน:*

เท่ากับ, ไม่เท่ากับ, ประมาณ, เท่ากันทุกประการ, คอนกรูเอ็นซ์ (มอดูโล), แปรผัน

{{{
= != ~~ ~= == propto
}}}

*ไม่เท่ากัน:*

น้อยกว่า, มากกว่า, น้อยกว่ามาก, มากกว่ามาก, น้อยกว่าหรือเท่ากับ, มากกว่าหรือเท่ากับ

{{{
< > << >> <= >=
}}}

*ตรรกะ:*

ทุกๆ, มี, เป็นสมาชิก, ไม่เป็นสมาชิก, เป็นซับเซต, เป็นซูเปอร์เซต

{{{
all exists in notin subset supset
}}}

*ลูกศร:*

จับคู่กับ, ลูกศรขวา (ถ้า ... แล้ว), ลูกศรซ้ายขวา (ก็ต่อเมื่อ)

{{{
|-> -> <->
}}}

*สัญลักษณ์อื่นๆ:*

{{{
\ ' : ? $ % & , ;
}}}


==อักขระและคำ==

อักขระภาษาอังกฤษจะถูกมองว่าเป็นตัวแปรโดยอัตโนมัติ
ถ้าคุณต้องการ `i` หรือ `j` ไม่มีหัว ให้เพิ่มคำว่า `math` ต่อท้ายคำนั้น
ข้อยกเว้นอื่นๆ ยังได้แก่ `hbar` และ `ell` อีกด้วย

{{{
imath, jmath, hbar, ell
}}}

สำหรับอักขระภาษากรีก ให้เขียนมันด้วยชื่อในภาษาอังกฤษ
โดยให้ตัวอักษรตัวแรกเป็นตัวพิมพ์ใหญ่ ถ้าคุณต้องการให้ตัวอักษรกรีกตัวนั้นเป็นตัวพิมพ์ใหญ่
สำหรับตัวอักษรที่มีวิธีเขียนมากกว่า 1 วิธี สามารถเรียกการเขียนอีกแบบได้โดยเติม `var` ไปที่ด้านหน้าของคำ

{{{
alpha, Delta, varphi
}}}

การเขียนชื่อเซตนั้นทำได้โดยเขียนตัวอักษรแสดงชื่อเซต แล้วนำคำว่า `set` มาต่อท้าย

{{{
Eset, Nset, Zset, Qset, Rset, Cset
}}}

นอกจากนี้ยังมีสัญลักษณ์พิเศษอีกบางตัว

{{{
infty empty partial nabla
}}}

ชื่อฟังก์ชันสามารถเรียกได้ทันทีโดยชื่อของมัน

{{{
sin, arccos, tanh, max, log, gcd, Re, Im
}}}

เช่นเดียวกันกับคำสงวนด้านตรรกะ-รหัสเทียม

{{{
if, then, else
}}}

หมายเหตุ ฟังก์ชันตรีโกณมิติผกผันจะแสดงในรูปของ `function_name^-1`


==การใส่ข้อความหรือ LaTeX เข้าไปตรงๆ==

ใส่ข้อความภายใต้ `" ... "` เพื่อให้มันแสดงเป็นข้อความตามปรกติ
คุณไม่สามารถใช้เครื่องหมาย `"` (quotation mark) ในการใส่ข้อความตรงๆ ได้

การใส่ข้อความแบบ LaTeX ทำได้ง่ายๆ เพียงแค่เพิ่ม `@` (at sign) ไว้ด้านหน้าการใส่ข้อความแบบธรรมดาตรงๆ

{{{
@" ... "
}}}

โปรดใช้ด้วยความระมัดระวัง!


==วงเล็บ==

วงเล็บเปิดนั้น ต้องการวงเล็บปิดแบบเดียวกับตัวมันเองเสมอ และวงเล็บปิดก็ไม่สามารถปรากฎก่อนวงเล็บเปิดได้

{{{
() [] {}
}}}

สำหรับวงเล็บพิเศษแบบอื่นๆ สามารถเรียกใช้ได้โดยประกาศชื่อวงเล็บนำหน้า `( ... )`

{{{
abs(ad-bc), norm(z), round(ln x), floor(n/2)
}}}

ในกรณีที่คุณต้องการแสดงวงเล็บปิดก่อนเปิด หรือต้องการแค่วงเล็บเปิด (เช่น `(-1, 7] หรือ ]-infty, 0]`) ให้ใช้ `" ... "` ครอบมันไว้


===วงเล็บอันตรธาน===

ในสถานการณ์ที่คุณต้องการรวมอะตอมหลายๆ อะตอมเป็นอะตอมเดียว ใช้ `( ... )` ครอบอะตอมเหล่านั้นเข้าไว้
วิธีการนี้เรียกว่า วงเล็บอันตรธาน ถ้าคุณนำไปใช้อย่างถูกที่ เครื่องหมายวงเล็บจะหายไปโดยอัตโนมัติ


=คำ=

คำคืออะตอมที่ถูกตกแต่งแล้ว


==การระบุตำแหน่ง==

เมื่อต้องการระบุตำแหน่งให้อะตอม ทำเหมือนกับที่คุณทำกับ array ในภาษาคอมพิวเตอร์ส่วนใหญ่

{{{
a[n], m[i][j]
}}}


==ยกกำลัง==

ใช้เครื่องหมาย `^` (caret) คั่นระหว่างส่วนฐานและส่วนกำลัง

{{{
c^2, a[n]^i, e^(pi i)
}}}

การยกกำลังต้องทำหลังจากการระบุตำแหน่งของฐานเรียบร้อยแล้วเท่านั้น มิฉะนั้นส่วนของตำแหน่งจะขึ้นไปเป็นสมบัติของส่วนกำลังแทน


==การเน้น==

เมื่อต้องการเน้นคำ ใส่คำสำคัญเล่านี้ไว้ข้างหน้ามัน เช่นนี้

{{{
vec(a), bar(z), hat(c), dot(m), ddot(n)
}}}

การเน้นคำสามารถวางซ้อนกันได้

{{{
vec(dot(a))
}}}

มีเพียง `vec`, `bar`, และ `hat` เท่านั้น ที่สามารถลากไปครอบคำยาวๆ ได้

{{{
bar(x + y)
}}}

ถ้าในวงเล็บมีเพียงแค่ i หรือ j ตามหลัง `vec`, `bar`, และ `hat` จุดบนหัวของ i และ j จะหายไปโดยอัตโนมัติ

{{{
vec(i), hat(j)
}}}


=ประโยค=

ประโยคคือกลุ่มของอะตอมและคำที่วางต่อๆ กันอย่างไรก็ได้ ถึงกระนั้นก็ตาม มันก็มีกฎบางอย่างเพื่อสร้างประโยคแบบพิเศษขึ้นมา


==ราก==

สำหรับรากที่สอง ใช้คำสำคัญ `sqrt` นำหน้าส่วนที่ต้องการให้ติดราก

{{{
sqrt(r)
}}}

ส่วนรากที่ n ใช้คำว่า `root` คั่นระหว่างดีกรีและรากออกจากกัน

{{{
(n)root(r)
}}}


==เศษส่วน==

เมื่อต้องการแสดงเศษส่วน ให้เครื่องหมาย `/` (slash) แยกระหว่างตัวเศษและตัวส่วน

{{{
a/b
}}}

ข้อควรระวังคือเศษส่วนไม่สามารถวางต่อกันเช่น 1/2/3 ได้ คุณต้องใช้วงเล็บอันตรธานเพื่อจัดกลุ่มให้พวกมันด้วยตัวเอง


==การเลือก==

ใช้คำสำคัญ `choose` แบ่งส่วนด้านบนและด้านล่างของการเลือก โดยครอบทั้งประโยคไว้ภายใต้วงเล็บ

{{{
(n choose r)
}}}


==เมตริกซ์==

เมตริกซ์สามารถเรียกใช้ได้โดย `[ ... ]` เมื่อมันไม่ได้ห้อยติดกับอะตอมใดๆ (ต้องการ space อย่างน้อย 1 ตัว มิฉะนั้นแล้ว มันจะกลายเป็นการระบุตำแหน่งแทน)

สมาชิกของเมตริกซ์แต่ละตัวจะถูกคั่นโดย `,` (comma) และ `;` (semicolon) ซึ่ง comma จะทำการแยกสมาชิกออกเป็นสดมภ์ ส่วน semicolon จะทำการแยกแถว (newline ไม่ส่งผลต่อการขึ้นบรรทัดใหม่ในที่นี้)

{{{
[a, b, c; d, e, f]
}}}

คุณสามารถเติมคำสำคัญสำหรับเปลี่ยนรูปร่างวงเล็บที่ครอบเมตริกซ์ได้ โดยการวางมันไว้ก่อนหน้า `[ ... ]` ที่มี space คั่น 1 ครั้ง

{{{
det [a, b; c, d]
parentheses [1, 2, 3; 4, 5, 6]
}}}

และคุณยังสามารถใช้คำสำคัญแบบ LaTeX ได้อีกด้วย

{{{
pmatrix, bmatrix, vmatrix, Vmatrix
}}}


===การแยกกรณี===

การแยกกรณีนั้น สามารถมองได้ว่าเป็นเมตริกซ์แบบหนึ่ง ซึ่งวงเล็บด้านซ้ายใช้เครื่องหมาย "{" ส่วนวงเล็บด้านขวานั้นไม่มี คุณสามารถเรียกใช้ได้ดังนี้

{{{
cases [x, if_ x >= 0; -x, if_ x < 0]
}}}

==ลิมิต==

ใช้คำสำคัญ `lim` สำหรับการแสดงลิมิต และคำสำคัญ `where` ตามด้วยขอบเขต

{{{
lim where(n -> infty)
}}}

คำสำคัญ `lim` กับ `where` ไม่จำเป็นต้องวางถัดกันเสมอไป ดังนั้นคุณอาจเขียนมันแยกกันเพื่อให้อ่านได้ง่ายขึ้นได้

{{{
lim x^x where(x -> 0)
}}}


==อินทริกรัล==

คำสำคัญของผลรวม-อินทริกรัลมีดังนี้

{{{
int, oint, iint, iiint, sum, prod, coprod, Union, Intersect
}}}

และประกาศขอบเขตของการอินทริกรัลโดยใช้คำสำคัญ `from ... to ...` หรือจะใช้ `where ...` เหมือนลิมิตก็ย่อมได้

{{{
int from a to b x_dx
coprod (4.n^2)/(4.n^2-1) from (n=1) to infty
Union A where (A in M)
}}}

ถึงแม้จะไม่มีคำสำคัญสำหรับการวางเพียงขอบเขตบนอย่างเดียว แต่คุณอาจประยุกต์ใช้นี่ได้

{{{
sum f(x) from () to (Rset)
}}}

ข้อควรระวัง คุณไม่สามารใช้ลิมิตและอินทริกรัลเป็นส่วนยกกำลังได้โดยไม่ครอบมันไว้ภายใต้ `( ... )`


=เทคนิค=

==สมการเคมี==

 # ครอบชื่อธาตุไว้ใต้ " ... "
 # เนื่องจากเราไม่มีคำสั่งสำหรับการใส่สมบัติอย่างเช่นการยกกำลังทางด้านซ้ายของอะตอม ให้ใช้อะตอมอันตรธาน (`""`) เพื่อแสดงสมบัติต่างๆ ก่อนหน้าอะตอมที่เราสนใจ
 # ใช้ `-->` เมื่อต้องการลูกศรแบบยาว
ตัวอย่าง:

{{{
$$
""[15]^32 "P" --> ""[16]^32 "S" + beta^- +v
$$
}}}


==รหัสเทียม==

 # ใช้ `#` เพื่อกำหนดจุดเริ่มต้นของแต่ละย่อหน้า
 # อย่าลืมใช้ `_` แทน space เมื่อต้องการเว้นช่องว่างระหว่างคำ
 # สำหรับแต่ละความลึกในรหัส ใช้ `__` ตามหลัง `#` เพื่อการจัดย่อหน้าแบบลึก
 # ชื่อฟังก์ชันที่กำหนดเองให้ครอบด้วย `" ... "` เสมอ
 # เนื่องากคำสำคัญ `to` ถูกเก็บไว้สำหรับการอินทริกรัลแล้ว ให้ใช้คำว่า `upto` หรือ `downto` แทน
 # ถ้าต้องการเพิ่มความง่ายในการอ่าน ให้ใส่เลขบรรทัดไว้ด้านหน้าเครื่องหมาย `#`
 # ใส่เครื่องหมายปิด EzMath ($$) ที่บรรทัดสุดท้ายของรหัสเทียม เพื่อให้รหัสเทียมจัดอยู่ทางซ้ายของย่อหน้า
ตัวอย่าง:

{{{
$$
1: # procedure_"factorial"("int"_n)
   # begin
   # __ var_"int"_r = 1
   # __ for_ i := n _downto_ 2 _step_ 1 _do
5: # ____ r <- r * i _od
   # __ return_ r
   # end $$
}}}
