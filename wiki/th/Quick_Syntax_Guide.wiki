#summary This guide shows you how to use EzMath instead of LaTeX when writting posts or comments.
#labels Featured,Phase-Design,Phase-Support

=คู่มือไวยกรณ์ EzMath แบบติดจรวด=

คู่มือนี้ จะแสดงถึงวิธีการใช้ EzMath แทนที่ LaTeX เมื่อคุณต้องการเผยแพร่บทความหรือแสดงความความคิดเห็นบนเว็บบอร์ด

การใช้ EzMath นั้นง่ายกว่าการใช้ LaTeX มาก
แต่คุณก็ยังสามารถใช้ LaTeX ควบคู่ไปกับ EzMath ได้ถ้าคุณต้องการและรู้วิธีใช้

<wiki:toc max_depth="3" />

=เริ่มต้น=

เมื่อต้องการแทรกสมการคณิตศาสตร์ในบรรทัดเดียวกับข้อความ เขียนไวยกรณ์ EzMath ภายในนี้

{{{
$$ ... $$
}}}

หรือเว้นบรรทัดก่อนและหลังไวยกรณ์ EzMath เช่นนี้

{{{
$$
...
$$
}}}

เพื่อแยกส่วนของสมการคณิตศาสตร์ออกจากข้อความทั่วไป


==กฎทั่วไป==

ไวยกรณ์ EzMath เป็น case sensitive (ตัวอักษรพิมพ์เล็ก-ใหญ่จะส่งผลต่างกัน)

แม้ว่าคุณจะสามารถพิมพ์ภาษาใดๆ เข้าไปในไวยกรณ์ EzMath ก็ได้ แต่เราแนะนำเฉพาะตัวอักษรภาษาอังกฤษ, ตัวเลขอาราบิก, และอักขระพิเศษแบบมาตรฐานเท่านั้น

{{{
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9 + - * / | \ ^ = ( ) [ ] { } < >
~ ? ! @ $ % & , . " ' : ; _ # space newline
}}}

SPACE และ TAB ไม่ถือว่าเป็นการจัดย่อหน้า ให้ใช้ `_` (underscore) และ `__` (double underscore) แทนตามลำดับ

แม้ว่าหลายครั้งนั้น SPACE จะถูกมองว่าไม่จำเป็น คุณอาจเขียนสมการเช่นนี้ได้

{{{
a+b=c^2
}}}

แต่เพื่อหลีกเลี่ยง AMBIGUITY คุณควรจะใช้ SPACE เว้นคำต่างๆ แยกจากกันทุกครั้ง

{{{
z = x i + y
}}}

NEWLINE จะถูกใช้งานเพื่อขึ้นบรรทัดใหม่แทบทั้งหมด โปรดระมัดระวังเมื่อใช้ NEWLINE เนื่องจากบางกรณีมันอาจทำให้ LaTeX เกิดข้อขัดแย้ง (เช่น `a/<newline>b`).

ใช้ `#` (hash) เพื่อจัดย่อหน้าสำหรับประโยคที่ตามมาในตำแหน่งเดียวกันกับบรรดทัดอื่นๆ

{{{
  a # = 22
  b # = 7
a/b # ~~ pi
}}}

ข้อควรระวังคือ ห้ามใช้ `#` ภายใต้วงเล็บใดๆ ทั้งสิ้น


=อะตอม=

อะตอมคือส่วนที่เล็กที่สุดของไวยกรณ์ EzMath คุณสามารถใช้มันเพื่อสร้างประโยคทางคณิตศาสตร์ได้


==จำนวน==

วิธีเขียนจำนวนมีอยู่ด้วยกัน 4 แบบ: จำนวนเต็ม, ทศนิยม, ทศนิยมไม่รู้จบ, และทศนิยมซ้ำ

สำหรับ 3 แบบแรกนั้น EzMath จะมองมันในรูปแบบของ WYSIWYG (เห็นอย่างไรได้อย่างนั้น)

{{{
42, 0.25, 3.1416...
}}}

ส่วนทศนิยมซ้ำต้องเขียนอยู่ในรูปของ

{{{
0.0...238095... ,or 0....9...
}}}

ข้อควรระวังคือ จำนวนสามารถประกอบไปด้วยตัวเลขและจุดเท่านั้น


==สัญลักษณ์==

Treat the most of frequently use symbol as the way you done with most computer program.

Elementary symbol:

{{{
+ - * // = !=
}}}

Basic symbol:

{{{
. ! | +- -+ ~ < > <= >= -> <-> ...
}}}

Additional symbol:

{{{
\ ' : ? $ % & , ;
}}}

Complex symbol:

{{{
(+) (-) (*) (/) (.) || << >> ~~ ~= == 
}}}

Text symbol:

{{{
and or not infty propto empty partial nabla
all exists in notin subset supset union intersect
}}}

==อักขระและคำ==

อักขระภาษาอังกฤษจะถูกมองว่าเป็นตัวแปรโดยอัตโนมัติ
ถ้าคุณต้องการ i หรือ j ไม่มีหัว ให้เพิ่มคำว่า `math` ต่อท้ายคำนั้น
กฎนี้ยังถูกใช้กับ h มีขีดอีกด้วย

{{{
imath, jmath, hbar
}}}

สำหรับอักขระภาษากรีก ให้เขียนมันด้วยชื่อในภาษาอังกฤษ
โดยให้ตัวอักษรตัวแรกเป็นตัวพิมพ์ใหญ่ ถ้าคุณต้องการให้ตัวอักษรกรีกตัวนั้นเป็นตัวพิมพ์ใหญ่
สำหรับตัวอักษรที่มีวิธีเขียนมากกว่า 1 วิธี สามารถเรียกการเขียนอีกแบบได้โดยเติม `var` ไปที่ด้านหน้าของคำ

{{{
alpha, Delta, varphi
}}}

การเขียนชื่อเซตนั้นทำได้โดยเขียนตัวอักษรแสดงชื่อเซต แล้วนำคำว่า `set` มาต่อท้าย

{{{
Eset, Nset, Zset, Qset, Rset, Cset
}}}

ชื่อฟังก์ชันสามารถเรียกได้ทันทีโดยชื่อของมัน

{{{
sin, arccos, tanh, max, log, gcd, Re, Im
}}}

And there also some frequently used logic word.

{{{
if, then, else
}}}

หมายเหตุ ฟังก์ชันตรีโกณมิติผกผันจะแสดงในรูปของ `function_name^-1`


==Escape Text and LaTeX==

ใส่ข้อความภายใต้ `" ... "` เพื่อให้มันแสดงเป็นข้อความตามปรกติ
There is no escape character for `"` (quotation mark) yet.

To escape LaTeX, just add `@` (at sign) in front of the text mode.

{{{
@" ... "
}}}

โปรดใช้ด้วยความระมัดระวัง!


==วงเล็บ==

วงเล็บเปิดนั้น ต้องการวงเล็บปิดแบบเดียวกับตัวมันเองเสมอ และวงเล็บปิดก็ไม่สามารถปรากฎก่อนวงเล็บเปิดได้

{{{
() [] {}
}}}

สำหรับวงเล็บพิเศษแบบอื่นๆ สามารถเรียกใช้ได้โดยประกาศชื่อวงเล็บนำหน้า `( ... )`

{{{
abs(ad-bc), norm(z), round(ln x), floor(n/2)
}}}

ในกรณีที่คุณต้องการแสดงวงเล็บปิดก่อนเปิด หรือต้องการแค่วงเล็บเปิด (เช่น `(-1, 7], ]-infty, 0]`) ให้ใช้ `" ... "` ครอบมันไว้


===วงเล็บอันตรธาน===

There are situation that you might want to wrap many atoms into one, use `( ... )` to wrap them.
This method called Reduce Parentheses. If you place them in the right position, the parentheses will be hide automatically.


=Word=

==Indexing==

To index the atom, treat them the way you done with computer's array.

{{{
a[n], m[i][j]
}}}


==Exponention==

Use `^` (caret) between base and exponent part.

{{{
c^2, a[n]^i, e^(pi i)
}}}

This must be done after indexed, otherwise the indexed will goes to the exponent.


==Accents==

To add accents to word, put this keywords ahade.

{{{
vec, bar, hat, dot, ddot
}}}

The accents can be stack.

{{{
vec ddot a
}}}

Only `vec`, `bar`, and `hat` can be extended for long word.

{{{
bar(x + y)
}}}

If there are only i or j after `vec`, `bar`, and `hat`; its dot will be removed automatically.

{{{
vec i, hat(j)
}}}


=Sentence=

==Roots==

The most frequently root, square root, can be call by favorite keyword `sqrt`.

{{{
sqrt(r)
}}}

For the nth root, place keyword "root" between the degree and the root.

{{{
(n)root(r)
}}}


==Fraction==

To express the fraction, use `/` (slash) to separate a numerator and a denominator.

{{{
a/b
}}}


==Combination==

For combination, place keyword `choose` inside parenteses, with upper on the left side and lower on the right side.

{{{
(n choose r)
}}}

==Matrix==

Matrix is call by `[ ... ]`, when it is not hinge to any atoms (need at least one whitespace before it - otherwise, its goes to indexed).

Each of element inside matrix is separate by `,` (comma) and `;` (semicolon). Comma is use to separate each element into columns, and semicolon separate there rows (newline character doesn't do any action inside matrix).

{{{
[a, b, c; d, e, f]
}}}

There are keywords to adjust matrix parentheses, which must be place before `[ ... ]` with exactly one whitespace.

{{{
det [a, b; c, d]
parentheses [1, 2, 3; 4, 5, 6]
}}}

Also, LaTeX matrix keyword style are allowed.

{{{
pmatrix, bmatrix, vmatrix, Vmatrix
}}}


===Cases===

Cases can be seen as a matrix, which left parentheses is "{" and right parentheses is omitted. So we can use this.

{{{
cases [x, if x >= 0; -x, if x < 0]
}}}

==Limits==

Use keyword `lim` for limits notation, and keyword `where` follow by condition.

{{{
lim where(n -> infty)
}}}

Keyword `lim` and `where` doesn't require to be place next to each other. So you may write them in sandwich style to improve readability.

{{{
lim x^x where(x -> 0)
}}}


==Integral==

Summation-integral symbol keywords are list bellow.

{{{
int, oint, iint, iiint, sum, prod, coprod, Union, Intersect
}}}

To hinge boundary, use keyword `from ... to ...` or `where ...` like the limits.

{{{
int from a to b x_dx
coprod (4.n^2)/(4.n^2-1) from (n=1) to infty
Union A where (A in M)
}}}

There is no keyword to put only top boundary, but you may adapt this.

{{{
sum f(x) from () to (Rset)
}}}

Note that you can not use this and the limits as exponent part without wrap it inside `( ... )`.


=Technique=

==Pseudocode==

 # Use `#` at the start of each line to mark start point of paragraph.
 # Use `_` to instead of spacebar to add whitespace between words.
 # For each depth inside the code, use `__` after `#` to add tab character.
 # Function name should be wrap between `" ... "` to prevent keyword conflict.
 # Since we kept keyword `to` for integral notation; use `upto`, or `downto` instead.
 # To provide more readability, add line number manually before `#`.
 # Put EzMath close tag ($$) at the end of last line to aligning code on left side.
Example:

{{{
$$
1: # procedure_"factorial"("int"_n)
   # begin
   # __ var_"int"_r = 1
   # __ for_ i := n _downto_ 2 _step_ 1 _do
5: # ____ r <- r * i _od
   # __ return_ r
   # end $$
}}}
